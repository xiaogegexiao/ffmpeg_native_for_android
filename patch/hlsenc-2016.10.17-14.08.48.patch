diff --git a/libavcodec/avcodec.h b/libavcodec/avcodec.h
index d849765..a78bcfa 100644
--- a/libavcodec/avcodec.h
+++ b/libavcodec/avcodec.h
@@ -1486,6 +1486,8 @@ typedef struct AVPacket {
 
     int64_t pos;                            ///< byte position in stream, -1 if unknown
 
+    int64_t camera_pts;
+
 #if FF_API_CONVERGENCE_DURATION
     /**
      * @deprecated Same as the duration field, but as int64_t. This was required
diff --git a/libavcodec/avpacket.c b/libavcodec/avpacket.c
index b2079f6..8a63e98 100644
--- a/libavcodec/avpacket.c
+++ b/libavcodec/avpacket.c
@@ -46,6 +46,7 @@ FF_ENABLE_DEPRECATION_WARNINGS
     pkt->buf                  = NULL;
     pkt->side_data            = NULL;
     pkt->side_data_elems      = 0;
+    pkt->camera_pts           = 0;
 }
 
 AVPacket *av_packet_alloc(void)
diff --git a/libavcodec/utils.c b/libavcodec/utils.c
index f532824..4531780 100644
--- a/libavcodec/utils.c
+++ b/libavcodec/utils.c
@@ -762,6 +762,7 @@ int ff_init_buffer_info(AVCodecContext *avctx, AVFrame *frame)
 
     if (pkt) {
         frame->pkt_pts = pkt->pts;
+        frame->camera_pts = pkt->camera_pts;
         av_frame_set_pkt_pos     (frame, pkt->pos);
         av_frame_set_pkt_duration(frame, pkt->duration);
         av_frame_set_pkt_size    (frame, pkt->size);
@@ -782,6 +783,7 @@ int ff_init_buffer_info(AVCodecContext *avctx, AVFrame *frame)
         add_metadata_from_side_data(pkt, frame);
     } else {
         frame->pkt_pts = AV_NOPTS_VALUE;
+        frame->camera_pts = 0;
         av_frame_set_pkt_pos     (frame, -1);
         av_frame_set_pkt_duration(frame, 0);
         av_frame_set_pkt_size    (frame, -1);
diff --git a/libavformat/Makefile b/libavformat/Makefile
index 35a383d..01e1b5c 100644
--- a/libavformat/Makefile
+++ b/libavformat/Makefile
@@ -187,6 +187,7 @@ OBJS-$(CONFIG_H261_DEMUXER)              += h261dec.o rawdec.o
 OBJS-$(CONFIG_H261_MUXER)                += rawenc.o
 OBJS-$(CONFIG_H263_DEMUXER)              += h263dec.o rawdec.o
 OBJS-$(CONFIG_H263_MUXER)                += rawenc.o
+OBJS-$(CONFIG_FOSCAM_DEMUXER) 			 += foscamdec.o
 OBJS-$(CONFIG_H264_DEMUXER)              += h264dec.o rawdec.o
 OBJS-$(CONFIG_H264_MUXER)                += rawenc.o
 OBJS-$(CONFIG_HDS_MUXER)                 += hdsenc.o
@@ -340,6 +341,7 @@ OBJS-$(CONFIG_PCM_MULAW_MUXER)           += pcmenc.o rawenc.o
 OBJS-$(CONFIG_PCM_S16BE_DEMUXER)         += pcmdec.o pcm.o
 OBJS-$(CONFIG_PCM_S16BE_MUXER)           += pcmenc.o rawenc.o
 OBJS-$(CONFIG_PCM_S16LE_DEMUXER)         += pcmdec.o pcm.o
+OBJS-$(CONFIG_FOSCAM_S16LE_DEMUXER)  += foscam_pcm.o
 OBJS-$(CONFIG_PCM_S16LE_MUXER)           += pcmenc.o rawenc.o
 OBJS-$(CONFIG_PCM_S24BE_DEMUXER)         += pcmdec.o pcm.o
 OBJS-$(CONFIG_PCM_S24BE_MUXER)           += pcmenc.o rawenc.o
diff --git a/libavformat/allformats.c b/libavformat/allformats.c
index 02bb16a..7347492 100644
--- a/libavformat/allformats.c
+++ b/libavformat/allformats.c
@@ -149,6 +149,7 @@ void av_register_all(void)
     REGISTER_MUXDEMUX(H261,             h261);
     REGISTER_MUXDEMUX(H263,             h263);
     REGISTER_MUXDEMUX(H264,             h264);
+    REGISTER_DEMUXER (FOSCAM,           foscam);
     REGISTER_MUXER   (HDS,              hds);
     REGISTER_MUXDEMUX(HEVC,             hevc);
     REGISTER_MUXDEMUX(HLS,              hls);
@@ -242,6 +243,7 @@ void av_register_all(void)
     REGISTER_MUXDEMUX(PCM_S24LE,        pcm_s24le);
     REGISTER_MUXDEMUX(PCM_S16BE,        pcm_s16be);
     REGISTER_MUXDEMUX(PCM_S16LE,        pcm_s16le);
+    REGISTER_MUXDEMUX(FOSCAM_S16LE,     foscam_s16le);
     REGISTER_MUXDEMUX(PCM_S8,           pcm_s8);
     REGISTER_MUXDEMUX(PCM_U32BE,        pcm_u32be);
     REGISTER_MUXDEMUX(PCM_U32LE,        pcm_u32le);
diff --git a/libavformat/avformat.h b/libavformat/avformat.h
index 34bad43..6ab30a2 100644
--- a/libavformat/avformat.h
+++ b/libavformat/avformat.h
@@ -1281,6 +1281,7 @@ typedef int (*av_format_control_message)(struct AVFormatContext *s, int type,
 typedef int (*AVOpenCallback)(struct AVFormatContext *s, AVIOContext **pb, const char *url, int flags,
                               const AVIOInterruptCB *int_cb, AVDictionary **options);
 
+typedef void (*AVCreateCallback)(const char *url);
 /**
  * The duration of a video can be estimated through various ways, and this enum can be used
  * to know how the duration was estimated.
@@ -1380,6 +1381,12 @@ typedef struct AVFormatContext {
     char filename[1024];
 
     /**
+     * set by application, camera_id for create_cb
+     *
+     * */
+    char camera_id[128];
+
+    /**
      * Position of the first frame of the component, in
      * AV_TIME_BASE fractional seconds. NEVER set this value directly:
      * It is deduced from the AVStream values.
@@ -1866,6 +1873,8 @@ typedef struct AVFormatContext {
      * A callback for closing the streams opened with AVFormatContext.io_open().
      */
     void (*io_close)(struct AVFormatContext *s, AVIOContext *pb);
+
+    void (*create_cb)(const char *camera_id, const char* url, const char* output_name, double duration, int64_t start_time, int64_t end_time);
 } AVFormatContext;
 
 int av_format_get_probe_score(const AVFormatContext *s);
diff --git a/libavformat/hlsenc.c b/libavformat/hlsenc.c
index 85a0907..39e7849 100644
--- a/libavformat/hlsenc.c
+++ b/libavformat/hlsenc.c
@@ -93,6 +93,7 @@ typedef struct HLSContext {
     int64_t size;         // last segment size
     int nb_entries;
     int discontinuity_set;
+    int disable_m3u8;
 
     HLSSegment *segments;
     HLSSegment *last_segment;
@@ -115,6 +116,9 @@ typedef struct HLSContext {
     AVDictionary *vtt_format_options;
 
     char *method;
+    int64_t camera_start_time;
+    int64_t last_camera_start_time;
+    int64_t return_timestamp;
 
 } HLSContext;
 
@@ -273,6 +277,9 @@ static int hls_mux_init(AVFormatContext *s)
     oc->opaque             = s->opaque;
     oc->io_open            = s->io_open;
     oc->io_close           = s->io_close;
+    oc->create_cb          = s->create_cb;
+    memset(oc->camera_id, 0, sizeof(oc->camera_id));
+    av_strlcpy(oc->camera_id, s->camera_id, sizeof(oc->camera_id));
     av_dict_copy(&oc->metadata, s->metadata, 0);
 
     if(hls->vtt_oformat) {
@@ -305,10 +312,11 @@ static int hls_mux_init(AVFormatContext *s)
 
 /* Create a new segment and append it to the segment list */
 static int hls_append_segment(HLSContext *hls, double duration, int64_t pos,
-                              int64_t size)
+                              int64_t size, int64_t camera_pts)
 {
     HLSSegment *en = av_malloc(sizeof(*en));
     int ret;
+    int64_t end_pts;
 
     if (!en)
         return AVERROR(ENOMEM);
@@ -337,6 +345,14 @@ static int hls_append_segment(HLSContext *hls, double duration, int64_t pos,
 
     hls->last_segment = en;
 
+    //dirname = av_strdup(hls->segment_filename);
+    if (hls->avf->create_cb) {
+        if (camera_pts) end_pts = camera_pts;
+        else end_pts = hls->camera_start_time + hls->duration;
+        hls->avf->create_cb(hls->avf->camera_id,hls->avf->filename, hls->oformat->name, hls->duration,
+                            hls->return_timestamp, end_pts);
+    }
+
     if (hls->max_nb_segments && hls->nb_entries >= hls->max_nb_segments) {
         en = hls->segments;
         hls->segments = en->next;
@@ -391,6 +407,8 @@ static int hls_window(AVFormatContext *s, int last)
     char *iv_string = NULL;
     AVDictionary *options = NULL;
 
+    if (hls->disable_m3u8) return ret;
+
     if (!use_rename && !warned_non_file++)
         av_log(s, AV_LOG_ERROR, "Cannot use rename on non file protocol, this may lead to races and temporarly partial files\n");
 
@@ -483,7 +501,19 @@ fail:
     return ret;
 }
 
-static int hls_start(AVFormatContext *s)
+static void get64string(int64_t x, char* ret)
+{
+    if (x <= 100000000)
+    {
+      sprintf(ret, "%ld", x);
+    } else {
+      int32_t high = x / 100000000;
+      int32_t low = x % 100000000;
+      sprintf(ret, "%ld%ld", high, low);
+    }
+}
+
+static int hls_start(AVFormatContext *s, int64_t camera_pts)
 {
     HLSContext *c = s->priv_data;
     AVFormatContext *oc = c->avf;
@@ -491,7 +521,7 @@ static int hls_start(AVFormatContext *s)
     AVDictionary *options = NULL;
     char *filename, iv_string[KEYSIZE*2 + 1];
     int err = 0;
-
+    //av_log(NULL, AV_LOG_ERROR, "hls enc, camera pts is %lld", camera_pts);
     if (c->flags & HLS_SINGLE_FILE) {
         av_strlcpy(oc->filename, c->basename,
                    sizeof(oc->filename));
@@ -501,12 +531,36 @@ static int hls_start(AVFormatContext *s)
     } else {
         if (c->use_localtime) {
             time_t now0;
-            struct tm *tm, tmpbuf;
+            struct tm *tm;
             time(&now0);
-            tm = localtime_r(&now0, &tmpbuf);
-            if (!strftime(oc->filename, sizeof(oc->filename), c->basename, tm)) {
-                av_log(oc, AV_LOG_ERROR, "Could not get segment filename with use_localtime\n");
-                return AVERROR(EINVAL);
+            //char timestring[128];
+
+            tm = gmtime(&now0);
+            av_strlcpy(tm->tm_zone, "GMT\0", 4);
+            tm->tm_gmtoff = 0;
+
+            if (camera_pts > 0)
+                c->camera_start_time = camera_pts;
+            else if (camera_pts < 0)
+                c->camera_start_time = c->last_camera_start_time + 10000;
+
+            char temppath[1024];
+            char path[1024];
+            av_strlcpy(temppath, c->basename, sizeof(temppath));
+            char *p = strrchr(temppath, '/');
+            if (p)
+                *p = '\0';
+            sprintf(path, temppath, (1900 + tm->tm_year), (tm->tm_mon + 1), tm->tm_mday);
+            opt_mkdir(path);
+
+            //get64string(camera_pts, timestring);
+            if (c->camera_start_time == 0) c->return_timestamp = ((int64_t)now0) * 1000;
+            else c->return_timestamp = c->camera_start_time;
+            c->last_camera_start_time = c->camera_start_time; // store lastest camera starttime
+            if ((sprintf(oc->filename, c->basename, (1900 + tm->tm_year), (tm->tm_mon + 1), tm->tm_mday,
+                         c->return_timestamp)) < 0) {
+              av_log(oc, AV_LOG_ERROR, "Could not get segment filename with use_localtime\n");
+              return AVERROR(EINVAL);
             }
        } else if (av_get_frame_filename(oc->filename, sizeof(oc->filename),
                                   c->basename, c->wrap ? c->sequence % c->wrap : c->sequence) < 0) {
@@ -587,7 +641,7 @@ static int hls_write_header(AVFormatContext *s)
     int ret, i;
     char *p;
     const char *pattern = "%d.ts";
-    const char *pattern_localtime_fmt = "-%s.ts";
+    const char *pattern_localtime_fmt = "/%4d-%02d-%02d/%lld.ts";
     const char *vtt_pattern = "%d.vtt";
     AVDictionary *options = NULL;
     int basename_size;
@@ -655,7 +709,7 @@ static int hls_write_header(AVFormatContext *s)
 
         av_strlcpy(hls->basename, s->filename, basename_size);
 
-        p = strrchr(hls->basename, '.');
+        p = strrchr(hls->basename, '/');
         if (p)
             *p = '\0';
         if (hls->use_localtime) {
@@ -697,7 +751,7 @@ static int hls_write_header(AVFormatContext *s)
     if ((ret = hls_mux_init(s)) < 0)
         goto fail;
 
-    if ((ret = hls_start(s)) < 0)
+    if ((ret = hls_start(s, 0)) < 0)
         goto fail;
 
     av_dict_copy(&options, hls->format_options, 0);
@@ -764,6 +818,7 @@ static int hls_write_packet(AVFormatContext *s, AVPacket *pkt)
                     pkt->flags & AV_PKT_FLAG_KEY;
         is_ref_pkt = st->codec->codec_type == AVMEDIA_TYPE_VIDEO;
     }
+
     if (pkt->pts == AV_NOPTS_VALUE)
         is_ref_pkt = can_split = 0;
 
@@ -778,7 +833,7 @@ static int hls_write_packet(AVFormatContext *s, AVPacket *pkt)
 
         new_start_pos = avio_tell(hls->avf->pb);
         hls->size = new_start_pos - hls->start_pos;
-        ret = hls_append_segment(hls, hls->duration, hls->start_pos, hls->size);
+        ret = hls_append_segment(hls, hls->duration, hls->start_pos, hls->size, pkt->camera_pts);
         hls->start_pos = new_start_pos;
         if (ret < 0)
             return ret;
@@ -794,8 +849,7 @@ static int hls_write_packet(AVFormatContext *s, AVPacket *pkt)
             ff_format_io_close(s, &oc->pb);
             if (hls->vtt_avf)
                 ff_format_io_close(s, &hls->vtt_avf->pb);
-
-            ret = hls_start(s);
+            ret = hls_start(s, pkt->camera_pts);
         }
 
         if (ret < 0)
@@ -825,7 +879,7 @@ static int hls_write_trailer(struct AVFormatContext *s)
     if (oc->pb) {
         hls->size = avio_tell(hls->avf->pb) - hls->start_pos;
         ff_format_io_close(s, &oc->pb);
-        hls_append_segment(hls, hls->duration, hls->start_pos, hls->size);
+        hls_append_segment(hls, hls->duration, hls->start_pos, hls->size, 0);
     }
 
     if (vtt_oc) {
@@ -855,7 +909,7 @@ static int hls_write_trailer(struct AVFormatContext *s)
 #define E AV_OPT_FLAG_ENCODING_PARAM
 static const AVOption options[] = {
     {"start_number",  "set first number in the sequence",        OFFSET(start_sequence),AV_OPT_TYPE_INT64,  {.i64 = 0},     0, INT64_MAX, E},
-    {"hls_time",      "set segment length in seconds",           OFFSET(time),    AV_OPT_TYPE_FLOAT,  {.dbl = 2},     0, FLT_MAX, E},
+    {"hls_time",      "set segment length in seconds",           OFFSET(time),    AV_OPT_TYPE_FLOAT,  {.dbl = 10},     0, FLT_MAX, E},
     {"hls_list_size", "set maximum number of playlist entries",  OFFSET(max_nb_segments),    AV_OPT_TYPE_INT,    {.i64 = 5},     0, INT_MAX, E},
     {"hls_ts_options","set hls mpegts list of options for the container format used for hls", OFFSET(format_options_str), AV_OPT_TYPE_STRING, {.str = NULL},  0, 0,    E},
     {"hls_vtt_options","set hls vtt list of options for the container format used for hls", OFFSET(vtt_format_options_str), AV_OPT_TYPE_STRING, {.str = NULL},  0, 0,    E},
@@ -871,9 +925,10 @@ static const AVOption options[] = {
     {"round_durations", "round durations in m3u8 to whole numbers", 0, AV_OPT_TYPE_CONST, {.i64 = HLS_ROUND_DURATIONS }, 0, UINT_MAX,   E, "flags"},
     {"discont_start", "start the playlist with a discontinuity tag", 0, AV_OPT_TYPE_CONST, {.i64 = HLS_DISCONT_START }, 0, UINT_MAX,   E, "flags"},
     {"omit_endlist", "Do not append an endlist when ending stream", 0, AV_OPT_TYPE_CONST, {.i64 = HLS_OMIT_ENDLIST }, 0, UINT_MAX,   E, "flags"},
-    { "use_localtime", "set filename expansion with strftime at segment creation", OFFSET(use_localtime), AV_OPT_TYPE_BOOL, {.i64 = 0 }, 0, 1, E },
+    { "use_localtime", "set filename expansion with strftime at segment creation", OFFSET(use_localtime), AV_OPT_TYPE_BOOL, {.i64 = 1 }, 0, 1, E },
+    { "disable_m3u8",          "disable m3u8 file creating", OFFSET(disable_m3u8), AV_OPT_TYPE_INT, {.i64 = 1 }, 0, 1, E },
     {"method", "set the HTTP method", OFFSET(method), AV_OPT_TYPE_STRING, {.str = NULL},  0, 0,    E},
-
+    {"start_time", "set first camera timestamp in the file", OFFSET(camera_start_time), AV_OPT_TYPE_INT64, {.i64 = 0}, 0, INT64_MAX, E},
     { NULL },
 };
 
diff --git a/libavformat/img2enc.c b/libavformat/img2enc.c
index ebbac2b..fcdbded 100644
--- a/libavformat/img2enc.c
+++ b/libavformat/img2enc.c
@@ -92,11 +92,39 @@ static int write_packet(AVFormatContext *s, AVPacket *pkt)
             time_t now0;
             struct tm *tm, tmpbuf;
             time(&now0);
-            tm = localtime_r(&now0, &tmpbuf);
+            //tm = localtime_r(&now0, &tmpbuf);
+
+            tm = gmtime(&now0);
+            char temppath[1024];
+            char path[1024];
+            char subfix[10];
+
+            memset(subfix, 0, sizeof(subfix));
+            char *subp = strrchr(img->path, '.');
+            memcpy(subfix, subp, sizeof(subfix));
+
+            av_strlcpy(temppath, img->path, sizeof(temppath));
+            char *p = strrchr(temppath, '/');
+            if (p)
+                *(p) = '\0';
+            av_strlcat(temppath, "/%4d-%02d-%02d", sizeof(temppath));
+            snprintf(path, temppath, (1900 + tm->tm_year), (tm->tm_mon + 1), tm->tm_mday);
+            opt_mkdir(path);
+
+            av_strlcat(path, "/%ld%s", sizeof(path));
+
+            /*
             if (!strftime(filename, sizeof(filename), img->path, tm)) {
                 av_log(s, AV_LOG_ERROR, "Could not get frame filename with strftime\n");
                 return AVERROR(EINVAL);
             }
+            */
+
+            if ((sprintf(filename, path, now0, subfix)) < 0) {
+                av_log(s, AV_LOG_ERROR, "Could not get frame filename with strftime\n");
+                return AVERROR(EINVAL);
+            }
+
         } else if (av_get_frame_filename(filename, sizeof(filename), img->path, img->img_number) < 0 &&
                    img->img_number > 1) {
             av_log(s, AV_LOG_ERROR,
@@ -181,6 +209,9 @@ static int write_packet(AVFormatContext *s, AVPacket *pkt)
                 return ret;
         }
     }
+    if (s->create_cb) {
+        s->create_cb(s->camera_id, filename, s->oformat->name, 0, 0, 0);
+    }
 
     img->img_number++;
     return 0;
diff --git a/libavformat/mux.c b/libavformat/mux.c
index f14bfd5..4102fbc 100644
--- a/libavformat/mux.c
+++ b/libavformat/mux.c
@@ -1017,7 +1017,10 @@ static int interleave_packet(AVFormatContext *s, AVPacket *out, AVPacket *in, in
 int av_interleaved_write_frame(AVFormatContext *s, AVPacket *pkt)
 {
     int ret, flush = 0;
-
+    int64_t camera_pts = 0;
+    if (pkt != NULL) {
+      camera_pts = pkt->camera_pts;
+    }
     ret = prepare_input_packet(s, pkt);
     if (ret < 0)
         goto fail;
@@ -1065,6 +1068,7 @@ int av_interleaved_write_frame(AVFormatContext *s, AVPacket *pkt)
         if (ret <= 0) //FIXME cleanup needed for ret<0 ?
             return ret;
 
+        opkt.camera_pts = camera_pts;
         ret = write_packet(s, &opkt);
         if (ret >= 0)
             s->streams[opkt.stream_index]->nb_frames++;
diff --git a/libavformat/pcm.c b/libavformat/pcm.c
index f62075f..aac3661 100644
--- a/libavformat/pcm.c
+++ b/libavformat/pcm.c
@@ -73,3 +73,4 @@ int ff_pcm_read_seek(AVFormatContext *s,
         return ret;
     return 0;
 }
+
diff --git a/libavformat/pcm.h b/libavformat/pcm.h
index 9af36d5..f687220 100644
--- a/libavformat/pcm.h
+++ b/libavformat/pcm.h
@@ -27,5 +27,6 @@
 int ff_pcm_read_packet(AVFormatContext *s, AVPacket *pkt);
 int ff_pcm_read_seek(AVFormatContext *s,
                      int stream_index, int64_t timestamp, int flags);
+int foscam_pcm_read_packet(AVFormatContext *s, AVPacket *pkt);
 
 #endif /* AVFORMAT_PCM_H */
diff --git a/libavformat/pcmdec.c b/libavformat/pcmdec.c
index 2584c33..f7282b0 100644
--- a/libavformat/pcmdec.c
+++ b/libavformat/pcmdec.c
@@ -32,6 +32,7 @@ typedef struct PCMAudioDemuxerContext {
     int channels;
 } PCMAudioDemuxerContext;
 
+
 static int pcm_read_header(AVFormatContext *s)
 {
     PCMAudioDemuxerContext *s1 = s->priv_data;
@@ -59,6 +60,7 @@ static int pcm_read_header(AVFormatContext *s)
     return 0;
 }
 
+
 static const AVOption pcm_options[] = {
     { "sample_rate", "", offsetof(PCMAudioDemuxerContext, sample_rate), AV_OPT_TYPE_INT, {.i64 = 44100}, 0, INT_MAX, AV_OPT_FLAG_DECODING_PARAM },
     { "channels",    "", offsetof(PCMAudioDemuxerContext, channels),    AV_OPT_TYPE_INT, {.i64 = 1}, 0, INT_MAX, AV_OPT_FLAG_DECODING_PARAM },
@@ -170,3 +172,4 @@ AVInputFormat ff_sln_demuxer = {
     .raw_codec_id   = AV_CODEC_ID_PCM_S16LE,
     .priv_class     = &sln_demuxer_class,
 };
+
diff --git a/libavformat/utils.c b/libavformat/utils.c
index 3aa5beb..80e5ef0 100644
--- a/libavformat/utils.c
+++ b/libavformat/utils.c
@@ -375,6 +375,7 @@ static int add_to_pktbuf(AVPacketList **packet_buffer, AVPacket *pkt,
     AVPacketList *pktl = av_mallocz(sizeof(AVPacketList));
     int ret;
 
+    int64_t camera_pts = pkt->camera_pts;
     if (!pktl)
         return AVERROR(ENOMEM);
 
@@ -387,6 +388,7 @@ static int add_to_pktbuf(AVPacketList **packet_buffer, AVPacket *pkt,
         pktl->pkt = *pkt;
     }
 
+    pktl->pkt.camera_pts = camera_pts;
     if (*packet_buffer)
         (*plast_pktl)->next = pktl;
     else
@@ -1240,9 +1242,14 @@ static int parse_packet(AVFormatContext *s, AVPacket *pkt, int stream_index)
     int size      = pkt ? pkt->size : 0;
     int ret = 0, got_output = 0;
 
+    
+    int64_t camera_pts = 0;
+    if (pkt)
+        camera_pts = pkt->camera_pts;
     if (!pkt) {
         av_init_packet(&flush_pkt);
         pkt        = &flush_pkt;
+        pkt->camera_pts = camera_pts;
         got_output = 1;
     } else if (!size && st->parser->flags & PARSER_FLAG_COMPLETE_FRAMES) {
         // preserve 0-size sync packets
@@ -1289,6 +1296,8 @@ static int parse_packet(AVFormatContext *s, AVPacket *pkt, int stream_index)
             }
         }
 
+        out_pkt.camera_pts = camera_pts;
+
         out_pkt.stream_index = st->index;
         out_pkt.pts          = st->parser->pts;
         out_pkt.dts          = st->parser->dts;
@@ -1330,9 +1339,13 @@ static int read_from_packet_buffer(AVPacketList **pkt_buffer,
                                    AVPacket      *pkt)
 {
     AVPacketList *pktl;
+    int64_t camera_pts = 0;
+    if (pkt)
+        camera_pts = pkt->camera_pts;
     av_assert0(*pkt_buffer);
     pktl        = *pkt_buffer;
     *pkt        = pktl->pkt;
+    pkt->camera_pts = camera_pts;
     *pkt_buffer = pktl->next;
     if (!pktl->next)
         *pkt_buffer_end = NULL;
@@ -1352,12 +1365,14 @@ static int read_frame_internal(AVFormatContext *s, AVPacket *pkt)
 
     av_init_packet(pkt);
 
+    int64_t camera_pts = 0;
     while (!got_packet && !s->internal->parse_queue) {
         AVStream *st;
         AVPacket cur_pkt;
 
         /* read next packet */
         ret = ff_read_packet(s, &cur_pkt);
+        camera_pts = cur_pkt.camera_pts;
         if (ret < 0) {
             if (ret == AVERROR(EAGAIN))
                 return ret;
@@ -1384,6 +1399,7 @@ static int read_frame_internal(AVFormatContext *s, AVPacket *pkt)
                    av_ts2str(cur_pkt.dts),
                    cur_pkt.size);
         }
+
         if (s->debug & FF_FDEBUG_TS)
             av_log(s, AV_LOG_DEBUG,
                    "ff_read_packet stream=%d, pts=%s, dts=%s, size=%d, duration=%"PRId64", flags=%d\n",
@@ -1426,6 +1442,8 @@ static int read_frame_internal(AVFormatContext *s, AVPacket *pkt)
             /* free packet */
             av_packet_unref(&cur_pkt);
         }
+        pkt->camera_pts = camera_pts;
+        cur_pkt.camera_pts = camera_pts;
         if (pkt->flags & AV_PKT_FLAG_KEY)
             st->skip_to_keyframe = 0;
         if (st->skip_to_keyframe) {
@@ -1495,6 +1513,7 @@ static int read_frame_internal(AVFormatContext *s, AVPacket *pkt)
         av_opt_set_dict_val(s, "metadata", NULL, AV_OPT_SEARCH_CHILDREN);
     }
 
+
     if (s->debug & FF_FDEBUG_TS)
         av_log(s, AV_LOG_DEBUG,
                "read_frame_internal stream=%d, pts=%s, dts=%s, "
@@ -1521,6 +1540,7 @@ int av_read_frame(AVFormatContext *s, AVPacket *pkt)
               : read_frame_internal(s, pkt);
         if (ret < 0)
             return ret;
+        
         goto return_packet;
     }
 
@@ -1530,6 +1550,7 @@ int av_read_frame(AVFormatContext *s, AVPacket *pkt)
         if (pktl) {
             AVPacket *next_pkt = &pktl->pkt;
 
+            int64_t camera_pts = next_pkt->camera_pts;
             if (next_pkt->dts != AV_NOPTS_VALUE) {
                 int wrap_bits = s->streams[next_pkt->stream_index]->pts_wrap_bits;
                 // last dts seen for this stream. if any of packets following
@@ -1566,6 +1587,7 @@ int av_read_frame(AVFormatContext *s, AVPacket *pkt)
                   next_pkt->dts != AV_NOPTS_VALUE && !eof)) {
                 ret = read_from_packet_buffer(&s->internal->packet_buffer,
                                                &s->internal->packet_buffer_end, pkt);
+                pkt->camera_pts = camera_pts;
                 goto return_packet;
             }
         }
@@ -1588,6 +1610,7 @@ int av_read_frame(AVFormatContext *s, AVPacket *pkt)
 
 return_packet:
 
+    //av_log(NULL, AV_LOG_ERROR, "read frame pkt camera_pts %lld, %d ", pkt->camera_pts, __LINE__);
     st = s->streams[pkt->stream_index];
     if ((s->iformat->flags & AVFMT_GENERIC_INDEX) && pkt->flags & AV_PKT_FLAG_KEY) {
         ff_reduce_index(s, st->index);
diff --git a/libavutil/frame.c b/libavutil/frame.c
index 033f013..bfd3d66 100644
--- a/libavutil/frame.c
+++ b/libavutil/frame.c
@@ -312,6 +312,7 @@ static int frame_copy_props(AVFrame *dst, const AVFrame *src, int force_copy)
     dst->colorspace             = src->colorspace;
     dst->color_range            = src->color_range;
     dst->chroma_location        = src->chroma_location;
+    dst->camera_pts             = src->camera_pts;
 
     av_dict_copy(&dst->metadata, src->metadata, 0);
 
diff --git a/libavutil/frame.h b/libavutil/frame.h
index 8dc4049..57bd874 100644
--- a/libavutil/frame.h
+++ b/libavutil/frame.h
@@ -490,6 +490,8 @@ typedef struct AVFrame {
      */
     int pkt_size;
 
+    int64_t camera_pts;
+
 #if FF_API_FRAME_QP
     /**
      * QP table
diff --git a/libavutil/opt.c b/libavutil/opt.c
index eae4f75..c34750c 100644
--- a/libavutil/opt.c
+++ b/libavutil/opt.c
@@ -42,6 +42,27 @@
 
 #include <float.h>
 
+void opt_mkdir(const char *path) {
+    char opath[256];
+    char *p;
+    size_t len;
+
+    umask(0);
+    strncpy(opath, path, sizeof(opath));
+    len = strlen(opath);
+    if(opath[len - 1] == '/')
+        opath[len - 1] = '\0';
+    for(p = opath; *p; p++)
+        if(*p == '/') {
+            *p = '\0';
+            if(access(opath, F_OK))
+                mkdir(opath, 0777);
+            *p = '/';
+        }
+    if(access(opath, F_OK))
+        mkdir(opath, 0777);
+}
+
 const AVOption *av_opt_next(const void *obj, const AVOption *last)
 {
     const AVClass *class;
diff --git a/libavutil/opt.h b/libavutil/opt.h
index 753434d..c765572 100644
--- a/libavutil/opt.h
+++ b/libavutil/opt.h
@@ -35,6 +35,9 @@
 #include "samplefmt.h"
 #include "version.h"
 
+#include <sys/stat.h>
+#include <unistd.h>
+
 /**
  * @defgroup avoptions AVOptions
  * @ingroup lavu_data
@@ -368,6 +371,8 @@ typedef struct AVOptionRanges {
     int nb_components;
 } AVOptionRanges;
 
+void opt_mkdir(const char* path);
+
 /**
  * Show the obj options.
  *
diff --git a/libavutil/timer.h b/libavutil/timer.h
index ed3b047..2753751 100644
--- a/libavutil/timer.h
+++ b/libavutil/timer.h
@@ -83,7 +83,7 @@
         if (((tcount + tskip_count) & (tcount + tskip_count - 1)) == 0) { \
             int i;                                                        \
             av_log(NULL, AV_LOG_ERROR,                                    \
-                   "%7"PRIu64" " FF_TIMER_UNITS " in %s,%8d runs,%7d skips",          \
+                   "%7" PRIu64" " FF_TIMER_UNITS " in %s,%8d runs,%7d skips",          \
                    tsum * 10 / tcount, id, tcount, tskip_count);          \
             for (i = 0; i < 32; i++)                                      \
                 av_log(NULL, AV_LOG_VERBOSE, " %2d", av_log2(2*thistogram[i]));\
diff --git a/libavutil/timestamp.h b/libavutil/timestamp.h
index f010a7e..e082f01 100644
--- a/libavutil/timestamp.h
+++ b/libavutil/timestamp.h
@@ -43,7 +43,7 @@
 static inline char *av_ts_make_string(char *buf, int64_t ts)
 {
     if (ts == AV_NOPTS_VALUE) snprintf(buf, AV_TS_MAX_STRING_SIZE, "NOPTS");
-    else                      snprintf(buf, AV_TS_MAX_STRING_SIZE, "%"PRId64, ts);
+    else                      snprintf(buf, AV_TS_MAX_STRING_SIZE, "%" PRId64, ts);
     return buf;
 }
 
